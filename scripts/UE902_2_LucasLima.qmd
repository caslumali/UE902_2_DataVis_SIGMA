---
title: "UE902_2 - Variabilité des températures en France"
author: "Lucas Lima"
format:
  html:
    theme: darkly
    css: ./styles.css
    toggle: true
    toc: true  
    code-fold: true  
    self-contained: true  
execute:
  freeze: auto
---

# **Introduction**

Cette page interactive constitue le projet final de l'UE902_2 *Visualisation de Données* du **M2 SIGMA** (Université Toulouse 2 Jean Jaurès / ENSAT-INP).

Les données exploitées proviennent des sources suivantes :

-   Le jeu de données climatiques [**TerraClimate**](https://developers.google.com/earth-engine/datasets/catalog/IDAHO_EPSCOR_TERRACLIMATE), couvrant les **20 dernières années** (2004 à 2023).

-   Le **découpage administratif de la France** issu de la base [**ADMIN EXPRESS**](https://geoservices.ign.fr/adminexpress), fournie par l'**IGN (Institut National de l'Information Géographique et Forestière)**.

L'objectif de ce projet est de présenter l'évolution des températures en France au cours des deux dernières décennies à travers **six types de visualisations complémentaires**. Ces représentations offrent des perspectives **spatiales**, **temporelles** et **statistiques** pour analyser en profondeur les tendances climatiques.

------------------------------------------------------------------------

## **Les six visualisations proposées sont :**

1.  **Carte Animée (GIF) des Températures Moyennes Annuelles (2004-2023)**\
    Une visualisation dynamique montrant l’évolution des températures moyennes annuelles en France, année après année, en mettant en évidence les variations spatiales et l’impact de la topographie.

2.  **Ridgeline Plot : Distribution des Températures Mensuelles en France (2004-2023)**\
    Un graphique statistique illustrant la répartition des températures mensuelles sur deux décennies. Il permet d’identifier la variabilité saisonnière, de comparer les distributions entre mois et de détecter les périodes plus stables ou plus volatiles.

3.  **Carte Animée des Anomalies de Températures Annuelles (2004-2023)**\
    Une animation cartographique montrant les anomalies de température par rapport à une moyenne de référence (2004-2023). Cette visualisation révèle les tendances au **réchauffement climatique** ainsi que l’intensification des anomalies positives au fil des ans.

4.  **Analyse des Tendances Saisonnières**\
    Un graphique linéaire présentant l’évolution des anomalies de température pour chaque saison (hiver, printemps, été et automne), accompagné de régressions linéaires. Cette analyse permet de déterminer les saisons connaissant le réchauffement le plus rapide.

5.  **Scatter Plot (Températures Maximales vs Minimales)**\
    Un diagramme de dispersion comparant les températures **maximales** et **minimales** annuelles moyennes par région. Il met en évidence l’amplitude thermique régionale et la corrélation entre les températures minimales et maximales.

6.  **Évolution des Températures Moyennes par Région (Facettes et Régressions Linéaires)**\
    Un ensemble de graphiques facettés illustrant l’évolution des températures moyennes annuelles par région, avec les **tendances linéaires** (pentes en °C/an). Cette visualisation met en évidence les disparités régionales de réchauffement, des régions côtières aux zones montagneuses.

------------------------------------------------------------------------

# **Méthodologie**

Les données **TerraClimate** ont été téléchargées depuis **Google Earth Engine (GEE)** à l’aide de trois scripts *JavaScript*. Les données obtenues incluent les températures **maximales**, **moyennes** et **minimales** pour l’ensemble du territoire français. Ces données climatiques sont disponibles mensuellement depuis **1958** avec une résolution spatiale de **4638,3 mètres**.

L’intégralité du script ayant généré cette page HTML a été produite dans un document **Quarto** à l’aide du logiciel **RStudio**. Étant donné que l’objectif de ce travail est exclusivement orienté sur la **visualisation des données**, toutes les sorties de code ont été supprimées à l’aide des commandes `echo: false` et `results: "hide"`, à l’exception des blocs générant les graphiques et les animations (GIF).

Une première phase de **prétraitement** a été réalisée pour organiser les données. Chaque jeu de données a été consolidé sous forme de **stack** (pile de couches raster). Ainsi, les **20 années** d’informations climatiques ont produit un **stack de 240 rasters** ordonnés et nommés chronologiquement, de **janvier 2004 à décembre 2023**.

Le **shapefile** utilisé pour les traitements géographiques concerne uniquement les **régions administratives françaises**.

Une fois les données préparées, tous les **géotraitements** ont été effectués et les visualisations ont été intégrées dans une page HTML interactive. Cette dernière a été hébergée sur un **dépôt GitHub** pour permettre son partage et sa consultation en ligne.

------------------------------------------------------------------------

```{r Chargement des bibliothèques}
#| echo: false
## Chargement des bibliothèques ----
suppressPackageStartupMessages({
  library(terra)
  library(gtools)
  library(ggplot2)
  library(magick)
  library(dplyr)
  library(tidyr)
  library(ggridges)
  library(parallel)
  library(future)
})

```

```{r Optimization de la renderization}
#| echo: false
#| results: "hide"
# Appel à les libraries parallel et future pour pousser la renderization
nucleos <- detectCores() - 2  # Détecte le nombre total de cœurs et réserve 1 cœur pour le système
cat("Nombre de cœurs disponibles pour le traitement parallèle :", nucleos, "\n")

# Configuration de future pour utiliser une session parallèle avec plusieurs cœurs
plan(multisession, workers = nucleos)  # Active le mode multisession avec le nombre de cœurs spécifiés

# Configuration du garbage collector pour optimiser l'utilisation de la mémoire
invisible(gc())  # Appelle le garbage collector pour libérer la mémoire inutilisée

# Augmentation de la limite de mémoire globale pour les calculs parallèles (ici, 8 Go)
options(future.globals.maxSize = 32 * 1024^3)  # Définit la taille maximale des objets globaux à 32 Go
```

```{r Paramèters généraux}
#| echo: false
#| results: "hide"
## Paramètres généraux ----
TC_DATA <- c("TerraClimate_Max", "TerraClimate_Mean", "TerraClimate_Min") # Types 


ROI_FOLDER <- "../data_brut/admin"  # Chemin des shapefiles
OUT_FOLDER <- "../data_final"       # Dossier pour sauvegarder les résultats
PLOT_FOLDER <- "results"         # Dossier pour les visualisations

# Création des dossiers s'ils n'existent pas
dir.create(OUT_FOLDER, showWarnings = FALSE, recursive = TRUE)
dir.create(PLOT_FOLDER, showWarnings = FALSE, recursive = TRUE)

```

```{r Chargement des shapefiles}
#| echo: false
#| results: "hide"
## Chargement des shapefiles ----
shp_regions <- vect(list.files(ROI_FOLDER, pattern = "REGION.*\\.shp$", full.names = TRUE))

```

```{r Dissolution du shp des régions}
#| echo: false
#| results: "hide"
## Dissolution du shapefile des régions ----

# Dissoudre les régions en une seule géométrie
suppressMessages({
    shp_france <- aggregate(shp_regions, dissolve = TRUE)
})

# Assurer que la projection correspond au raster TerraClimate
raster_exemple <- rast(list.files(stringr::str_glue("../data_brut/{TC_DATA[1]}"), 
                                  pattern = "\\.tif$", full.names = TRUE)[1])

# Reprojeter si nécessaire
if (!crs(shp_france) == crs(raster_exemple)) {
  shp_france <- project(shp_france, crs(raster_exemple))
  cat("Projection du shapefile ajustée pour correspondre aux rasters TerraClimate.\n")
}

# Sauvegarder le shapefile dissolu (optionnel)
writeVector(shp_france, filename = "../data_final/france_dissolved.shp", overwrite = TRUE)
```

```{r Création des stacks}
#| echo: false
#| results: "hide"

## Pré-traitement des rasters TerraClimate ----

# Charger le shapefile dissolu pour la France
shp_france <- vect("../data_final/france_dissolved.shp")

# Boucle pour chaque type de données climatiques
for (tc_data in TC_DATA) {
  
  cat("\nTraitement en cours pour :", tc_data, "\n")
  
  # 1. Identifier si on traite Max, Mean ou Min
  type_temp <- sub("^TerraClimate_", "", tc_data)
  
  # 2. Lister les fichiers raster dans le répertoire et les trier
  chemin_rasters <- list.files(
    path = stringr::str_glue("../data_brut/{tc_data}"),  # Chemin des fichiers
    pattern = "\\.tif$", 
    full.names = TRUE
  )
  chemin_rasters <- gtools::mixedsort(chemin_rasters)  # Tri dans l'ordre année-mois
  
  # 3. Vérifier s'il y a des fichiers
  if (length(chemin_rasters) == 0) {
    cat("Aucun fichier trouvé pour :", tc_data, "\n")
    next
  }
  
  # 4. Créer un stack à partir des rasters
  cat("Création du stack pour :", tc_data, "\n")
  tc_stack <- rast(chemin_rasters)
  
  # 5. Générer des noms dynamiques pour chaque couche
  annees <- rep(2004:2023, each = 12)  # 20 années
  mois <- rep(sprintf("%02d", 1:12), times = 20)  # Mois formatés en "01", "02", ...
  
  # Créer les noms : typeTemp_AAAA_MM (ex: Max_2004_01, Mean_2023_12)
  noms_couches <- paste(type_temp, annees, mois, sep = "_")
  
  # Attribuer les noms aux couches
  names(tc_stack) <- noms_couches
  
  # 6. Découper le stack avec la frontière de la France
  cat("Découpage avec la frontière de la France...\n")
  tc_france <- crop(tc_stack, shp_france, mask = TRUE)
  
  # 7. Vérification et sauvegarde
  cat("Nombre de couches dans le stack :", nlyr(tc_france), "\n")
  chemin_sortie <- stringr::str_glue("{OUT_FOLDER}/{tc_data}.tif")
  writeRaster(tc_france, chemin_sortie, overwrite = TRUE)
  
  cat("Stack sauvegardé dans :", chemin_sortie, "\n")
}

cat("\nPré-traitement des rasters terminé avec succès !\n")

```

# **Carte des températures annuelles moyennes en France de 2004 à 2023**

La carte animée ci-dessous présente l'évolution des **températures moyennes annuelles** en France de **2004 à 2023**. Chaque image représente la **moyenne des 12 mois** pour une année donnée, ce qui permet de visualiser les **changements climatiques** sur deux décennies.

```{r Calcul de la température annuelle moyenne}
#| echo: false
#| results: "hide"
## 1. Chargement des rasters pré-traités ----
raster_temp_mean <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Mean.tif"))

# 2. Agréger les moyennes mensuelles pour chaque année ----

# Liste des années
annees <- 2004:2023

# Initialiser une variable vide
raster_temp_annual <- NULL  

# Calcul des moyennes annuelles
raster_temp_annual <- do.call(c, lapply(1:length(annees), function(i) {
  temp_mois <- raster_temp_mean[[((i-1)*12 + 1):(i*12)]]
  app(temp_mois, mean, na.rm = TRUE)
}))

# Sauvegarder le raster avec la température moyenne calculée
writeRaster(raster_temp_annual, stringr::str_glue("{PLOT_FOLDER}/TerraClimate_Annual_Mean.tif"),
            overwrite = TRUE)

cat(" Températures Moyennes Annuelles dans 'results/TerraClimate_Annual_Mean.tif'.\n")

```

```{r Création de la carte de Temp. Moyenne Anuelle}
#| echo: false
#| results: "hide"
# Palette ajustée pour des variations plus subtiles
palette_temp <- c("#313695", "#4575B4", "#74ADD1", "#FEE090", "#F46D43", "#A50026")

# Définir des limites pour la légende (couper les extrêmes)
limites_temp <- c(2, 18)

# Boucle pour créer les cartes ajustées
for (i in 1:length(annees)) {
  temp_annee <- raster_temp_annual[[i]]
  
  # Convertir en data.frame pour ggplot2
  temp_df <- as.data.frame(temp_annee, xy = TRUE, na.rm = TRUE)
  colnames(temp_df) <- c("x", "y", "temp")
  
  # Filtrer les valeurs pour ignorer les températures extrêmes
  temp_df$temp <- pmin(pmax(temp_df$temp, limites_temp[1]), limites_temp[2])
  

  p <- ggplot() +
    geom_tile(data = temp_df, aes(x = x, y = y, fill = temp)) +
    scale_fill_gradientn(
      colors = palette_temp,
      name = "Température\n(°C)",
      limits = limites_temp,
      oob = scales::squish
    ) +
    labs(
      title = stringr::str_glue("Températures Moyennes - Année {annees[i]}") 
    ) +
    theme_void() +
    theme(
      plot.background = element_rect(fill = "transparent", color = NA),  
      panel.background = element_rect(fill = "transparent", color = NA),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5, color = "white"),
      plot.subtitle = element_text(size = 10, hjust = 0.5, color = "white"),
      legend.background = element_blank(),
      legend.key = element_blank(),
      legend.margin = margin(0, 0, 0, 0),
      legend.box.margin = margin(0, 0, 0, 0), 
      legend.position = "right",
      legend.title = element_text(size = 10, face = "bold", color = "white", hjust = 0.5),
      legend.text = element_text(size = 8, color = "white")
    )

  ggsave(filename = stringr::str_glue("temp_images/temp_moy_{annees[i]}.png"),
         plot = p, width = 6, height = 5, dpi = 300, bg = "transparent")

  
  cat("Carte de Temperature Moyenne générée pour l'année :", annees[i], "\n")
}
```

```{r Génération du GIF}
#| echo: false
#| results: "hide"
# Création du GIF ajusté avec magick ----
# Charger les images ajustées
images <- list.files("temp_images", pattern = "temp_moy.*\\.png$", full.names = TRUE)
img_list <- image_read(images)

# Créer l'animation GIF
gif <- image_animate(img_list, fps = 2) # 2 images par seconde
image_write(gif, path = normalizePath("results/Carte_Temperatures_Moyennes.gif", mustWork = FALSE))

cat("\nGIF ajusté créé avec succès et sauvegardé dans 'results/Carte_Temperatures_Moyennes.gif' !\n")
```

```{r Charger le GIF de temperatures moyennes}
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("results/Carte_Temperatures_Moyennes.gif")
```

## **Principales Observations :**

-   **Régions Montagneuses** :\
    Les zones telles que les **Alpes**, les **Pyrénées**, le **Massif Central** et les montagnes **corses** apparaissent systématiquement plus **froides** (teintes bleues). Cela est dû à leur **altitude élevée**, qui réduit les températures moyennes.

-   **Régions de Plaine** :\
    Les régions situées dans les plaines du **sud-ouest** (ex: Aquitaine) et du **sud-est** montrent des températures plus **élevées** (teintes rouges). Ces zones bénéficient d'un climat plus **chaud** et moins influencé par l'altitude.

-   **Régions Méditerranéennes** :\
    Les régions méditerranéennes et la **Corse** présentent les **températures les plus élevées** de la France hexagonale, avec des couleurs **rouges plus foncées**.

-   **Variabilité Temporelle** :\
    Bien que les températures varient légèrement d'une année à l'autre, on observe une **tendance générale au réchauffement**, avec une **progression des températures moyennes plus élevées** vers le **centre-nord** et le **nord-est** de la France.

## **Détails Techniques :**

Les étapes clés du traitement des données incluent :

-   **Agrégation** des températures mensuelles pour obtenir des **moyennes annuelles**.

-   **Ajustement** de la palette de couleurs pour **accentuer les variations régionales**.

-   **Génération** d'une animation **GIF** pour visualiser les changements **au fil du temps**.

------------------------------------------------------------------------

# **Ridgeline Plot : Températures Mensuelles en France (2004-2023)**

Ce graphique montre la **distribution des températures mensuelles** agrégées sur les **20 dernières années** pour toute la France. Chaque ligne correspond à un mois de l’année (de janvier à décembre), permettant de comparer les distributions mensuelles de manière intuitive.

```{r Début processus Ridgeline Plot}
#| echo: false
#| results: "hide"

# Charger les rasters de température moyenne
raster_temp_mean <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Mean.tif"))

# Obtenir le nombre total de couches et d'années
total_layers <- nlyr(raster_temp_mean) # Total de camadas (240)
total_years <- 20                     # 20 ans (2004-2023)
months_per_year <- 12                 # 12 mois par an

# Créer une liste des mois basée sur la logique du stack
# On utilise un séquencement pour associer les mois correctement
mois_stack <- rep(month.name, times = total_years)
layer_indices <- unlist(lapply(1:months_per_year, function(m) seq(m, total_layers, by = months_per_year)))
mois_correct <- mois_stack[order(layer_indices)]

# Renommer les couches raster avec les mois corrigés
names(raster_temp_mean) <- mois_correct

# Extraire les données des rasters avec les noms corrigés
temp_df <- as.data.frame(raster_temp_mean, xy = TRUE, na.rm = TRUE)

# Conversion des données en format long pour ggplot2
temp_df_long <- temp_df %>%
  pivot_longer(
    cols = -c(x, y),
    names_to = "Mois",
    values_to = "Température"
  ) %>%
  mutate(
    Mois = factor(Mois, levels = month.name) # Assurer l'ordre correct des mois
  )

# Vérification des données
head(temp_df_long)

```

```{r Calcul moyennes mensuelles}
#| echo: false
#| results: "hide"
# Charger les rasters de température moyenne
raster_temp_mean <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Mean.tif"))

# Créer des indices mensuels pour chaque couche du stack
nomes_meses <- month.name  # Noms des mois complets
indices_mois <- lapply(0:11, function(i) seq(i + 1, nlyr(raster_temp_mean), by = 12))
names(indices_mois) <- nomes_meses  # Associer les noms des mois aux indices

# Calculer les moyennes mensuelles par pixel
cat("Agrégation des moyennes mensuelles par pixel...\n")
raster_moyenne_mensuelle <- lapply(nomes_meses, function(mois) {
  mean(raster_temp_mean[[indices_mois[[mois]]]], na.rm = TRUE)
})
raster_moyenne_mensuelle <- rast(raster_moyenne_mensuelle)
names(raster_moyenne_mensuelle) <- nomes_meses  # Nommer les couches par mois

# Convertir en data.frame pour ggplot2
cat("Conversion des rasters en data.frame...\n")
temp_df <- as.data.frame(raster_moyenne_mensuelle, xy = TRUE, na.rm = TRUE)

# Reformater les données en format long pour ggplot2
temp_df_long <- temp_df %>%
  pivot_longer(
    cols = starts_with("Jan"):starts_with("Dec"),  # Colonnes des moyennes par mois
    names_to = "Mois",
    values_to = "Température"
  ) %>%
  mutate(Mois = factor(Mois, levels = nomes_meses))  # Assurer l'ordre des mois

```

```{r Génération du Ridgeline plot}
#| echo: false
#| fig-width: 18
#| fig-height: 10
#| out-width: "100%"

# Calculer la moyenne des températures par mois
moyenne_temp <- temp_df_long %>%
  group_by(Mois) %>%
  summarize(Temp_Moyenne = mean(Température, na.rm = TRUE))

# Création du Ridgeline Plot ajusté
ggplot(temp_df_long, aes(x = Température, y = Mois, fill = after_stat(x))) +
  geom_density_ridges_gradient(
    scale = 1.5,             # Ajuste la hauteur des courbes
    rel_min_height = 0.01,   # Garde les courbes propres
    bandwidth = 0.5,         # Ajuste la lissitude
    color = "black"          # Contour noir pour une meilleure lisibilité
  ) +
  scale_fill_gradientn(
    colors = c("#440154", "#414487", "#2A788E", "#22A884", "#FDE725"),
    name = "Température (°C)"
  ) +
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.05))) +
  coord_cartesian(xlim = c(-5, 30)) +  # Limite l'axe X pour retirer les valeurs inutiles (ex. -10)
  labs(
    title = "Distribution des Températures Mensuelles en France (2004-2023)",
    subtitle = "Chaque mois affiche la répartition des températures",
    x = "Température (°C)",
    y = "Mois"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_rect(fill = "#2C2C2C", color = NA),
    plot.background = element_rect(fill = "#2C2C2C", color = NA),
    plot.title = element_text(
      size = 22, face = "bold", hjust = 0.5, color = "white",
      margin = margin(b = 5) # Aumenta a margem abaixo do título
    ),
    plot.subtitle = element_text(
      size = 18, hjust = 0.5, color = "white",
      margin = margin(b = 20) # Aumenta a margem abaixo do subtítulo
    ),
    axis.title = element_text(face = "bold", size = 14, color = "white"),
    axis.text = element_text(size = 18, color = "white"),
    legend.title = element_text(size = 20, face = "bold", color = "white"), 
    legend.text = element_text(size = 18, color = "white"),
    legend.background = element_rect(fill = "#2C2C2C", color = NA),
    legend.position = "right",
    plot.margin = margin(t = 20, r = 10, b = 10, l = 10), 
    plot.title.position = "plot" 
  )

# Sauvegarder le graphique
ggsave(filename = stringr::str_glue("{PLOT_FOLDER}/Ridgeline_Temp_Mensuelles.png"),
       width = 14, height = 10, dpi = 300, bg = "#2C2C2C")

```

## **Principales Observations :**

-   **Variabilité Saisonnière Marquée :** Chaque courbe représente la distribution des températures pour l’ensemble du territoire sur l’ensemble des 20 années, pour un mois donné (tous les janvier confondus, tous les février confondus, etc.). Les différences marquées entre les mois d’hiver et d’été révèlent la nette saisonnalité du climat français.

-   **Transitions Progressives entre les Saisons :** L’évolution de la forme et de la position des courbes de densité d’un mois à l’autre montre clairement la progression saisonnière, du froid hivernal à la chaleur estivale, puis la redescente en automne.

-   **Hétérogénéité Statistique :** Certains mois affichent une distribution plus étalée, suggérant une variabilité interannuelle importante (par exemple, des étés parfois très chauds ou des mois de printemps plus imprévisibles).

-   **Stabilité Relative de Certains Mois :** À l’inverse, certains mois présentent des distributions plus concentrées, indiquant une relative stabilité des températures au fil des ans.

## **Détails Techniques :**

-   **Agrégation et Transformation :**\
    Les valeurs mensuelles ont été moyennées spatialement pour obtenir une série temporelle de températures mensuelles moyennes à l’échelle nationale. Ensuite, les distributions de ces températures (tous pixels et toutes les années confondus) ont été visualisées.

-   **Visualisation (Ridgeline Plot) :**\
    Ce Ridgeline Plot, réalisé avec **ggplot2** et **ggridges**, montre la densité des températures mensuelles (tous pixels et toutes années confondues) sur un axe horizontal (Température en °C). Chaque ligne correspond à un mois donné, avec la “crête” indiquant la répartition statistique des valeurs de température pour ce mois sur 20 ans. La position verticale des lignes ne reflète pas une mesure numérique, mais sert simplement à séparer visuellement les distributions mensuelles. Ainsi, on peut facilement comparer les formes, les étendues et les modes des distributions entre différents mois.

-   **Palette de Couleurs :**\
    Une échelle de couleurs dégradée, allant du violet/bleu (températures plus froides) au vert/jaune (températures plus chaudes), a été utilisée pour faciliter la lecture et l’interprétation visuelle.

------------------------------------------------------------------------

# **Carte des anomalies de températures annuelles en France (2004-2023)**

La carte animée ci-dessous présente les **anomalies de températures annuelles** en France entre **2004 et 2023**. Les anomalies sont calculées en comparant les températures moyennes annuelles à une **moyenne de référence** sur la période complète (2004-2023). Cette approche permet de **détecter et visualiser** les écarts par rapport à la normale climatique.

Les teintes **rouges** indiquent des températures **supérieures** à la moyenne de référence, tandis que les teintes **bleues** représentent des températures **inférieures**.

```{r Calcul de la moyenne de références}
#| echo: false
#| results: "hide"
# Calcul de la moyenne de référence des températures ----

# Charger le stack des températures moyennes prétraité
raster_temp_mean <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Mean.tif"))

# Calculer la moyenne temporelle pour chaque pixel sur les 20 ans
temp_ref_mean <- app(raster_temp_mean, mean, na.rm = TRUE)

# Sauvegarder le raster de référence
writeRaster(temp_ref_mean, stringr::str_glue("{PLOT_FOLDER}/Temp_Ref_Moyenne.tif"), overwrite = TRUE)

cat("Moyenne de référence des températures sauvegardée dans 'Temp_Ref_Moyenne.tif'.\n")

```

```{r Calcul des anomalies}
#| echo: false
#| results: "hide"
# Calcul des anomalies annuelles ----

# Charger le raster de référence (moyenne sur 20 ans)
temp_ref_mean <- rast(stringr::str_glue("{PLOT_FOLDER}/Temp_Ref_Moyenne.tif"))

# Charger le stack des températures annuelles déjà calculées
raster_temp_annual <- rast(stringr::str_glue("{PLOT_FOLDER}/TerraClimate_Annual_Mean.tif"))

# Liste des années (2004 à 2023)
annees <- 2004:2023

# Initialiser un stack vide pour stocker les anomalies annuelles
anom_stack <- NULL 

# Calcul des anomalies annuelles
anom_stack <- do.call(c, lapply(1:length(annees), function(i) {
  raster_temp_annual[[i]] - temp_ref_mean
}))

# Sauvegarder le raster des anomalies
writeRaster(anom_stack, stringr::str_glue("{PLOT_FOLDER}/Anomalies_Temp_Annuel.tif"), overwrite = TRUE)

cat("\nAnomalies sauvegardées dans 'results/Anomalies_Temp_Annuel.tif'.\n")

```

```{r, Extraire les valeurs global des anomalies}
#| echo: false
#| results: "hide"
# Obtenir les valeurs globales (min, max) pour toutes les couches
res_global <- global(anom_stack, fun = c("min", "max"), na.rm = TRUE)
print(res_global)

```

```{r, Génération de la carte des anomalies}
#| echo: false
#| results: "hide"
## Génération de la carte animée des anomalies ----

# Charger le stack des anomalies annuelles
anom_stack <- rast(stringr::str_glue("{PLOT_FOLDER}/Anomalies_Temp_Annuel.tif"))

# Liste des années (2004 à 2023)
annees <- 2004:2023

# Palette de couleurs ajustée pour les anomalies (bleu → rouge)
palette_anomalies <- c("#313695", "#4575B4", "#74ADD1", "#FEE090", "#F46D43", "#A50026")

# Définir les limites fixes des anomalies
limites_anomalies <- c(-2, 2)  # Ajustez selon l'amplitude des anomalies observées

# Créer un dossier temporaire pour les cartes
dir.create("temp_anomalies", showWarnings = FALSE)

# Boucle pour créer les cartes d'anomalies par année
for (i in 1:length(annees)) {
  # Extraire la couche d'anomalie pour l'année actuelle
  anomalie_annee <- anom_stack[[i]]
  
  # Convertir en data.frame pour ggplot2
  anom_df <- as.data.frame(anomalie_annee, xy = TRUE, na.rm = TRUE)
  colnames(anom_df) <- c("x", "y", "anom")
  
  # Créer la carte avec ggplot2
  p <- ggplot() +
    geom_tile(data = anom_df, aes(x = x, y = y, fill = anom)) +
    scale_fill_gradientn(
      colors = palette_anomalies,
      name = "Anomalie\n(°C)",
      limits = limites_anomalies,
      oob = scales::squish
    ) +
    labs(
      title = stringr::str_glue("Anomalies de Températures - Année {annees[i]}"),
      subtitle = "Référence : Moyenne 2004-2023"
    ) +
    theme_void() +
    theme(
      plot.background = element_rect(fill = "transparent", color = NA),  
      panel.background = element_rect(fill = "transparent", color = NA),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5, color = "white"),
      plot.subtitle = element_text(size = 10, hjust = 0.5, color = "white"),
      legend.background = element_blank(),
      legend.key = element_blank(),
      legend.margin = margin(0, 0, 0, 0),
      legend.box.margin = margin(0, 0, 0, 0), 
      legend.position = "right",
      legend.title = element_text(size = 10, face = "bold", color = "white", hjust = 0.5),
      legend.text = element_text(size = 8, color = "white"),
    )
  
  # Enregistrer les cartes temporaires
  ggsave(filename = stringr::str_glue("temp_anomalies/anomalie_{annees[i]}.png"),
         plot = p, width = 6, height = 5, dpi = 300, bg = "transparent")

  
  cat("Carte d'anomalie générée pour l'année :", annees[i], "\n")
}

```

```{r, Génération de GIF des anomalies}
#| echo: false
#| results: "hide"
# Génération du GIF avec magick ----
images_anomalies <- list.files("temp_anomalies", pattern = "anomalie_.*\\.png$", full.names = TRUE)
img_list_anomalies <- image_read(images_anomalies)

# Créer l'animation GIF
gif_anomalies <- image_animate(img_list_anomalies, fps = 2)  # 2 images par seconde
image_write(gif_anomalies, path = stringr::str_glue("{PLOT_FOLDER}/Anomalies_Temporelles.gif"))

cat("\nGIF des anomalies créé avec succès dans 'results/Anomalies_Temporelles.gif' !\n")

```

```{r Charger le GIF des anomalies}
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("results/Anomalies_Temporelles.gif")
```

## **Principales Observations :**

-   **Répartition Spatiale :**\
    Une tendance nette au **réchauffement climatique** se dessine avec une transition progressive des teintes **bleues** (anomalies froides) vers des teintes **rouges** (anomalies chaudes), marquant des températures **plus élevées** sur l'ensemble du territoire.

-   **Accélération Temporelle :**\
    Après **2010**, les anomalies positives deviennent **plus fréquentes et plus intenses**, témoignant d’une **accélération claire du réchauffement climatique**. Les dernières années, en particulier, se distinguent par des températures **nettement supérieures** à la moyenne de référence.

-   **Extrêmes Marqués :**\
    Le début de la période révèle quelques **anomalies négatives** (teintes bleues), tandis que les années récentes montrent une **progression constante** des **anomalies positives** (teintes rouges), illustrant un contraste frappant au fil des décennies.

------------------------------------------------------------------------

## **Détails Techniques :**

Les étapes clés du traitement des données incluent :

1.  **Calcul de la Moyenne de Référence :**\
    Une moyenne des températures a été calculée pour chaque pixel sur l'ensemble de la période **2004-2023**.

2.  **Calcul des Anomalies :**\
    Les anomalies annuelles ont été obtenues en soustrayant la **moyenne de référence** des températures annuelles pour chaque pixel.

3.  **Visualisation Animée :**\
    Une **animation GIF** a été générée pour illustrer les **variations spatiales** des anomalies au fil du temps.

4.  **Ajustement des Limites des Anomalies :**\
    Les limites des anomalies ont été fixées à **\[-2, 2\] °C** afin de mettre en évidence les écarts significatifs tout en couvrant l'ensemble des valeurs observées dans les données. La plage réelle des anomalies s'étend de **-1.63 °C à 2.00 °C**.

------------------------------------------------------------------------

### *Perspectives complémentaires :*

Cette carte des anomalies met en avant l’évolution spatiale du réchauffement sur les deux dernières décennies. . Pour approfondir cette analyse, le **Ridgeline Plot** présenté précédemment offre une perspective temporelle et statistique plus fine, en montrant la répartition des températures mensuelles au fil des ans.

De plus, l’analyse des **tendances saisonnières** illustrées ci-dessous permet de comprendre les dynamiques propres à chaque saison, éclairant ainsi les distributions mensuelles et le rôle des variations intra-annuelles dans l’évolution du climat.

------------------------------------------------------------------------

# **Analyse des tendances saissonières**

Le graphique ci-dessous présente l’**évolution des anomalies de température saisonnières** en France entre **2004 et 2023**. Les anomalies sont calculées en comparant les températures mensuelles à une **moyenne de référence** pour chaque mois sur la période complète (**2004-2023**). Les mois sont ensuite regroupés en **quatre saisons climatiques** :

-   **Hiver** : Décembre, Janvier, Février
-   **Printemps** : Mars, Avril, Mai
-   **Été** : Juin, Juillet, Août
-   **Automne**: Septembre, Octobre, Novembre

Chaque courbe représente une **saison**, et les lignes pointillées indiquent les **tendances linéaires** calculées pour chaque saison. Cela permet de **visualiser l’évolution des anomalies moyennes** sur deux décennies.

```{r Calcul des anomalies saisonnières}
#| echo: false
#| results: "hide"
# Charger les températures moyennes mensuelles pour 20 ans (2004-2023)
raster_temp_mean <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Mean.tif"))

# Calculer la moyenne de référence pour chaque mois
cat("Calcul de la moyenne de référence par mois...\n")
temp_ref_mean <- app(raster_temp_mean, mean, na.rm = TRUE)

# Calculer directement les anomalies par rapport à la moyenne de référence
cat("Calcul vectorisé des anomalies...\n")
anomalies_raster <- raster_temp_mean - temp_ref_mean

# Conversion en data.frame avec une structure adaptée
cat("Extraction des anomalies en format data.frame...\n")
anomalies <- as.data.frame(anomalies_raster, xy = TRUE, na.rm = TRUE)

# Renommer correctement les colonnes : x, y, Année_Mois
noms_colonnes <- c("x", "y", paste0(rep(2004:2023, each = 12), "_", 
                                   rep(c("Jan", "Fév", "Mar", "Avr", "Mai", "Juin", 
                                         "Juil", "Août", "Sept", "Oct", "Nov", "Déc"), times = 20)))

colnames(anomalies) <- noms_colonnes

# Transformer en format long
anomalies_long <- anomalies %>%
  tidyr::pivot_longer(cols = -c(x, y), 
                      names_to = "Temps", 
                      values_to = "Anomalie") %>%
  separate(Temps, into = c("Année", "Mois"), sep = "_") %>%
  mutate(
    Année = as.integer(Année),
    Mois = factor(Mois, levels = c("Jan", "Fév", "Mar", "Avr", "Mai", "Juin", 
                                   "Juil", "Août", "Sept", "Oct", "Nov", "Déc"))
  )

# Sauvegarder le dataframe au format RDS pour une utilisation ultérieure
saveRDS(anomalies_long, file = stringr::str_glue("{PLOT_FOLDER}/anomalies_long.rds"))

cat("Le DataFrame anomalies_long a été sauvegardé avec succès.\n")

```

```{r, Génération des tendances saisonnières}
#| echo: false
#| fig-width: 12
#| fig-height: 8
#| out.width: "100%"

anomalies_long <- readRDS(stringr::str_glue("{PLOT_FOLDER}/anomalies_long.rds"))

# Regrouper les mois en saisons ----
anomalies_long <- anomalies_long %>%
  mutate(
    Saison = case_when(
      Mois %in% c("Déc", "Jan", "Fév") ~ "Hiver",
      Mois %in% c("Mar", "Avr", "Mai") ~ "Printemps",
      Mois %in% c("Juin", "Juil", "Août") ~ "Été",
      Mois %in% c("Sept", "Oct", "Nov") ~ "Automne"
    )
  )

# Agréger les anomalies par saison et année ----
anomalies_saison <- anomalies_long %>%
  group_by(Année, Saison) %>%
  summarize(Anomalie_Moyenne = mean(Anomalie, na.rm = TRUE), .groups = "drop")

# Ajustement du graphique ----
p <- ggplot(anomalies_saison, aes(x = Année, y = Anomalie_Moyenne, color = Saison, group = Saison)) +
  geom_line(linewidth = 1.5) +  
  geom_point(size = 2) +  
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, linetype = "dashed", linewidth = 0.8) +
  scale_color_manual(values = c("Hiver" = "#4575B4", "Printemps" = "#74ADD1", 
                                "Été" = "#F46D43", "Automne" = "#FEE090")) +
  labs(
    title = "Tendances des Anomalies de Température par Saison (2004-2023)",
    subtitle = "Régressions linéaires ajoutées pour mettre en évidence les tendances",
    x = "Année",
    y = "Anomalie Moyenne (°C)",
    color = "Saison"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.background = element_rect(fill = "#2C2C2C", color = NA),
    panel.background = element_rect(fill = "#2C2C2C", color = NA),
    panel.grid.major = element_line(color = "#444444", linewidth = 0.2),
    panel.grid.minor = element_line(color = "#444444", linewidth = 0.1),
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "white"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "white"),
    axis.title = element_text(face = "bold", size = 16, color = "white"),
    axis.text = element_text(size = 14, color = "white"),
    legend.title = element_text(size = 12, face = "bold", color = "white"),
    legend.text = element_text(size = 12, color = "white"),
    legend.background = element_rect(fill = "#2C2C2C", color = NA)
  )

# Enregistrer la carte
ggsave("results/Tendances_Anomalies_Saisons.png", bg = "#2C2C2C", plot = p, width = 14, height = 8, dpi = 300)

# Afficher le graphique
p

```

## **Principales Observations :**

-   **Automne :**\
    La courbe des anomalies pour l’automne montre des valeurs **positives et croissantes** tout au long de la période. Cela suggère un **réchauffement notable** de cette saison, avec des températures systématiquement **au-dessus de la normale**.

-   **Printemps :**\
    Le printemps affiche des **anomalies négatives persistantes** jusqu’au milieu des années 2010, avant une **légère tendance à la hausse**. Cette saison semble donc se réchauffer, mais à un rythme plus lent que l’automne.

-   **Hiver :**\
    Les anomalies hivernales oscillent autour de **0°C** avec une **faible variabilité**. Malgré quelques pics positifs récents, la tendance générale reste relativement **stable** sur la période étudiée.

-   **Été :**\
    L’été présente une courbe similaire à l’hiver, avec des anomalies oscillant légèrement autour de **0°C**. Les tendances linéaires indiquent toutefois une **légère augmentation**, ce qui pourrait signaler un réchauffement plus lent pour cette saison.

------------------------------------------------------------------------

## **Détails Techniques :**

Les étapes clés du traitement des données incluent :

1.  **Calcul des Anomalies Mensuelles :**\
    Les températures mensuelles ont été comparées à une **moyenne de référence** pour chaque mois sur l’ensemble de la période (**2004-2023**).

2.  **Regroupement par Saisons :**\
    Les anomalies mensuelles ont été regroupées pour les **quatre saisons climatiques** afin d'obtenir des moyennes saisonnières pour chaque année.

3.  **Calcul des Tendances Linéaires :**\
    Des **régressions linéaires** ont été appliquées aux anomalies moyennes pour chaque saison afin de mettre en évidence les **tendances temporelles**.

4.  **Visualisation des Courbes :**

    -   Les courbes continues montrent l’**évolution annuelle** des anomalies pour chaque saison.
    -   Les **lignes pointillées** représentent les **tendances linéaires**.
    -   Chaque saison est colorée différemment pour une meilleure lisibilité.

------------------------------------------------------------------------

# **Scatter Plot de l'Amplitude Thermique par Région**

Le graphique de dispersion ci-dessous illustre la **relation entre les températures maximales et minimales moyennes annuelles** pour chaque **région française** entre **2004 et 2023**. Chaque point représente une **année donnée** dans une région spécifique, tandis que la **couleur des points** permet de distinguer les régions françaises et que **la forme des points** différencie les **deux décennies** analysées :\
- **Cercle** : Années **2004-2013**\
- **Triangle** : Années **2014-2023**

Cette représentation visuelle facilite l'analyse des **évolutions climatiques** régionales et permet de mettre en évidence les différences d'**amplitude thermique** entre les deux décennies.

```{r Début du Scatter Plot}
#| echo: false
#| results: "hide"
# Charger les bibliothèques nécessaires
# Charger les rasters Max et Min ----
raster_temp_max <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Max.tif"))
raster_temp_min <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Min.tif"))

# Liste des années de 2004 à 2023 ----
annees <- 2004:2023

# Agréger les rasters par année (moyenne des 12 mois) ----
cat("Agréger les rasters mensuels en moyennes annuelles...\n")

raster_temp_max_annuel <- do.call(c, lapply(1:length(annees), function(i) {
  # Sélectionner les 12 couches pour l'année actuelle
  temp_mois_max <- raster_temp_max[[((i-1)*12 + 1):(i*12)]]
  # Calculer la moyenne annuelle
  app(temp_mois_max, mean, na.rm = TRUE)
}))

raster_temp_min_annuel <- do.call(c, lapply(1:length(annees), function(i) {
  temp_mois_min <- raster_temp_min[[((i-1)*12 + 1):(i*12)]]
  app(temp_mois_min, mean, na.rm = TRUE)
}))

# Vérification des nouvelles dimensions
cat("Nombre de couches dans raster_temp_max_annuel :", nlyr(raster_temp_max_annuel), "\n")
cat("Nombre de couches dans raster_temp_min_annuel :", nlyr(raster_temp_min_annuel), "\n")

# Sauvegarder les rasters annuels ----
writeRaster(raster_temp_max_annuel, filename = stringr::str_glue("{OUT_FOLDER}/TerraClimate_Max_Annuel.tif"), overwrite = TRUE)
writeRaster(raster_temp_min_annuel, filename = stringr::str_glue("{OUT_FOLDER}/TerraClimate_Min_Annuel.tif"), overwrite = TRUE)

cat("Les rasters annuels ont été sauvegardés avec succès !\n")

```

```{r Calcul Temp Max et Min par région}
#| echo: false
#| results: "hide"
# Charger les rasters annuels sauvegardés ----
raster_temp_max <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Max_Annuel.tif"))
raster_temp_min <- rast(stringr::str_glue("{OUT_FOLDER}/TerraClimate_Min_Annuel.tif"))

# Assurez-vous que les rasters et les régions ont le même CRS ----
if (!crs(raster_temp_max) == crs(shp_regions)) {
  shp_regions <- project(shp_regions, crs(raster_temp_max))
  cat("Projection du shapefile ajustée pour correspondre aux rasters.\n")
}

# Initialiser le dataframe pour stocker les résultats ----
temp_region <- data.frame()

# Extraire les valeurs moyennes par région ----
for (i in 1:length(annees)) {
  cat("Extraction des moyennes pour l'année :", annees[i], "\n")
  
  # Extraire les moyennes pour Température Max et Min
  temp_max <- terra::extract(raster_temp_max[[i]], shp_regions, fun = mean, na.rm = TRUE)[, 2]
  temp_min <- terra::extract(raster_temp_min[[i]], shp_regions, fun = mean, na.rm = TRUE)[, 2]
  
  # Créer un dataframe temporaire
  temp_data <- data.frame(
    Région = shp_regions$NOM,  # Utilise l'attribut 'NOM' pour les noms des régions
    Année = annees[i],
    Temp_Max = temp_max,
    Temp_Min = temp_min
  )
  
  # Ajouter les résultats au dataframe principal
  temp_region <- rbind(temp_region, temp_data)
}

# Sauvegarder les résultats ----
write.csv(temp_region, file = "results/Temp_Max_Min_Regions.csv", row.names = FALSE)
cat("Les résultats ont été sauvegardés dans 'results/Temp_Max_Min_Regions.csv'.\n")

```

```{r Génération du scatter plot}
#| echo: false
#| fig-width: 14
#| fig-height: 8
#| out-width: "100%"


# Charger les résultats extraits ----
temp_region <- read.csv("results/Temp_Max_Min_Regions.csv")

# Ajouter une colonne 'Décennie' pour différencier les années
# Si l'année est inférieure ou égale à 2013, elle appartient à "2004-2013"
# Sinon, elle appartient à "2014-2023"
temp_region$Décennie <- ifelse(temp_region$Année <= 2013, "2004-2013", "2014-2023")

# Filtrer les valeurs NA ----
temp_region <- temp_region %>%
  dplyr::filter(!is.na(Temp_Max) & !is.na(Temp_Min))

# Palette de couleurs personnalisée (13 couleurs uniques) ----
couleurs_regions <- c(
  "#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", 
  "#a6761d", "#666666", "#1f78b4", "#33a02c", "#fb9a99", "#b15928", "#fdbf6f"
)

# Création du scatter plot avec forme différente pour chaque décennie ----
p <- ggplot(temp_region, aes(x = Temp_Min, y = Temp_Max, color = Région, shape = Décennie)) +
  geom_point(alpha = 0.8, size = 4) +  # Points avec transparence et taille optimisée
  scale_color_manual(values = couleurs_regions) +  # Palette de couleurs pour les régions
  scale_shape_manual(values = c(16, 17)) +  # Formes : cercle (16) pour 2004-2013 et triangle (17) pour 2014-2023
  labs(
    title = "Relation entre Températures Maximales et Minimales (2004-2023)",
    subtitle = "Différenciation des décennies par la forme des points",
    x = "Température Minimale Moyenne (°C)",
    y = "Température Maximale Moyenne (°C)",
    color = "Région",  
    shape = "Décennie"  
  ) +
  guides(
    shape = guide_legend(override.aes = list(color = "white", size = 4)) 
  ) + 
  theme_minimal(base_size = 14) +
  theme(
    plot.background = element_rect(fill = "#2C2C2C", color = NA),  
    panel.background = element_rect(fill = "#2C2C2C", color = NA),
    plot.margin = margin(t = 20, r = 10, b = 20, l = 10),
    panel.grid.major = element_line(color = "#626262", linewidth = 0.3),
    panel.grid.minor = element_line(color = "#626262", linewidth = 0.2),
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "white"),
    plot.subtitle = element_text(size = 18, hjust = 0.5, color = "white", margin = margin(b = 20)),
    
    # Ajuster les titres des axes
    axis.title.x = element_text(size = 18, face = "bold", color = "white", margin = margin(t = 10)),
    axis.title.y = element_text(size = 18, face = "bold", color = "white", margin = margin(r = 15)),
    
    axis.text = element_text(size = 14, color = "white"),
    legend.title = element_text(size = 12, face = "bold", color = "white"),
    legend.text = element_text(size = 12, color = "white"),
    legend.background = element_blank(),
    legend.key = element_blank()
  )

# Sauvegarder le graphique ----
ggsave("results/Scatter_Temp_Max_Min_Formes.png", bg = "#2C2C2C", plot = p, width = 12, height = 8, dpi = 300)

# Afficher le graphique ----
p


```

## **Principales Observations :**

-   **Corrélation Positive Générale :**\
    Une **relation linéaire positive** est visible entre les températures maximales et minimales moyennes. Les régions ayant des températures minimales plus élevées présentent également des températures maximales plus élevées.

-   **Évolution des Décennies :**

    -   Les points **triangulaires** (2014-2023) tendent à se décaler légèrement vers la **droite** et vers le **haut** du graphique, suggérant une augmentation des températures minimales et maximales moyennes par rapport à la décennie précédente (2004-2013).
    -   Cela pourrait indiquer un **réchauffement climatique** dans plusieurs régions françaises.

-   **Variabilité Régionale :**

    -   Les régions du **Sud** de la France, comme la **Provence-Alpes-Côte d'Azur** et l'**Occitanie**, montrent des températures **plus élevées**, avec des points situés dans la partie supérieure droite du graphique.
    -   Les régions **montagneuses** et **nordiques**, telles que **Auvergne-Rhône-Alpes** et les **Hauts-de-France**, présentent des températures plus **basses**, situées dans la partie inférieure gauche.

-   **Comparaison entre Décennies :**\
    En comparant les deux formes de points, on observe dans certaines régions une **réduction de l'amplitude thermique** (écart entre les températures maximales et minimales), tandis que d'autres montrent une **augmentation notable**, probablement en raison de facteurs climatiques spécifiques.

## **Détails Techniques :**

1.  **Extraction des Températures Maximales et Minimales :**\
    Les températures moyennes **maximales** et **minimales** ont été extraites pour chaque année et chaque région en utilisant les données **TerraClimate**. Cette étape a été réalisée grâce à des opérations sur les rasters climatiques et les shapefiles des régions françaises.

2.  **Agrégation des Moyennes Régionales :**\
    Les valeurs ont été moyennées au niveau de chaque région pour assurer une analyse cohérente et faciliter la comparaison entre les régions.

3.  **Différenciation des Décennies :**\
    Une colonne supplémentaire a été ajoutée aux données pour identifier les années appartenant à la première décennie (**2004-2013**) et celles de la seconde décennie (**2014-2023**).

4.  **Visualisation des Données :**

    -   Les **couleurs** des points permettent de distinguer les régions françaises.

    -   Les **formes** des points (cercles et triangles) différencient les deux décennies pour faciliter la comparaison.

------------------------------------------------------------------------

# **Évolution des Températures Moyennes par Région**

Ce graphique illustre **l’évolution des températures moyennes annuelles** par région française entre **2004 et 2023**. Chaque facette représente une **région** regroupée par localisation géographique (Nord, Nord-Est, Centre, Sud, Ouest, Sud-Est, Sud-Ouest). Les points orange montrent les températures moyennes observées chaque année, tandis que les lignes cyan indiquent les **tendances linéaires** ajustées via une régression linéaire. La valeur de la pente de chaque tendance, affichée en **jaune**, correspond à l’**augmentation moyenne annuelle des températures** (°C/an).

```{r Début du processus pour temp moy des régions}
#| echo: false
#| results: "hide"

# Renommer les couches du raster pour éviter les doublons 
names(raster_temp_mean) <- paste0("Layer_", 1:nlyr(raster_temp_mean))  # Renommer les couches raster

# Extraire les moyennes régionales directement ----**
# Extraire les moyennes par région à partir du raster
temp_mean_region <- terra::extract(raster_temp_mean, shp_regions, fun = mean, na.rm = TRUE, ID = TRUE)

# Associer les noms des régions en utilisant les IDs
temp_mean_region <- temp_mean_region %>%
  as.data.frame() %>%
  mutate(Région = shp_regions$NOM[ID])  # Ajouter les noms des régions

# Restructurer les données en format long 
# Associer correctement les années aux couches raster
temp_data_long <- temp_mean_region %>%
  pivot_longer(
    cols = starts_with("Layer_"),
    names_to = "Layer",
    values_to = "Temp_Moyenne"
  ) %>%
  mutate(
    Année = rep(rep(2004:2023, each = 12), times = length(shp_regions))  # 20 ans x 12 mois pour chaque région
  )

# 4. Agréger les données par région et année 
# Calculer la température moyenne annuelle par région
temp_data_annual <- temp_data_long %>%
  group_by(Région, Année) %>%
  summarize(Temp_Moyenne_Region = mean(Temp_Moyenne, na.rm = TRUE), .groups = "drop")

# Trier les régions par température moyenne globale 
# Calculer et trier les régions en fonction de la température moyenne globale
region_order <- temp_data_annual %>%
  group_by(Région) %>%
  summarize(Temp_Moyenne_Globale = mean(Temp_Moyenne_Region, na.rm = TRUE)) %>%
  arrange(desc(Temp_Moyenne_Globale)) %>%
  pull(Région)

# Réorganiser les données pour l'affichage final
temp_data_annual <- temp_data_annual %>%
  mutate(Région = factor(Région, levels = region_order))

# Affichage des données 
print(temp_data_annual)

# Ajouter la localisation géographique 
temp_data_annual <- temp_data_annual %>%
  mutate(Localisation = case_when(
    Région %in% c("Hauts-de-France", "Île-de-France") ~ "Nord",
    Région %in% c("Grand Est", "Bourgogne-Franche-Comté") ~ "Nord-Est",
    Région %in% c("Normandie", "Bretagne", "Pays de la Loire") ~ "Ouest",
    Région %in% c("Centre-Val de Loire") ~ "Centre",
    Région %in% c("Auvergne-Rhône-Alpes", "Provence-Alpes-Côte d'Azur") ~ "Sud-Est",
    Région %in% c("Occitanie", "Corse") ~ "Sud",
    Région %in% c("Nouvelle-Aquitaine") ~ "Sud-Ouest"
  ))

# Calcule des pentes pour chaque région 
slopes <- temp_data_annual %>%
  group_by(Région) %>%
  summarize(Slope = coef(lm(Temp_Moyenne_Region ~ Année))[2], .groups = "drop")

# Fusionner les pentes avec les données principales
temp_data_annual <- temp_data_annual %>%
  left_join(slopes, by = "Région")

```

```{r Génération des facettes par région}
#| echo: false
#| fig-width: 18
#| fig-height: 24

# Graphique avec facettes géographiques et valeurs des pentes 
ggplot(temp_data_annual, aes(x = Année, y = Temp_Moyenne_Region, group = Région)) +
  geom_point(color = "orange", size = 3) +  # Points représentant les données annuelles                        
  geom_smooth(method = "lm", formula = y ~ x, color = "cyan", se = FALSE, linewidth = 1.5) +  # Tendance linéaire
  facet_wrap(~ Localisation + Région, ncol = 2) +  # Diviser le graphique par régions (facettes)
  geom_text(
    aes(
      x = min(Année) + 1,  # Position horizontale du texte
      y = max(Temp_Moyenne_Region, na.rm = TRUE) - 0.5,  # Position verticale du texte
      label = paste0("Slope: ", round(Slope, 3), " °C/an")  # Texte affichant la pente
    ),
    color = "#b0ad00", size = 6, fontface = "bold", hjust = 0  # Style du texte
  ) +
  labs(
    title = "Évolution des Températures Moyennes par Région (2004-2023)",  # Titre principal
    subtitle = "Analyse linéaire des tendances avec valeurs des pentes",  # Sous-titre
    x = "Année",  # Titre de l'axe X
    y = "Température Moyenne (°C)"  # Titre de l'axe Y
  ) +
  theme_dark(base_size = 16) +  # Thème sombre avec base 16 pour la taille du texte
  theme(
    # Titre et sous-titre
    plot.title = element_text(size = 24, face = "bold", hjust = 0.5, color = "white"),
    plot.subtitle = element_text(size = 20, hjust = 0.5, color = "white", margin = margin(b = 20)),
    
    # Titres des axes - espacement ajusté
    axis.title.x = element_text(size = 20, face = "bold", color = "white", margin = margin(t = 10)),
    axis.title.y = element_text(size = 20, face = "bold", color = "white", margin = margin(r = 20)), # Plus d'espacement à droite
    
    # Texte des axes
    axis.text.x = element_text(size = 14, color = "white", hjust = 1),
    axis.text.y = element_text(size = 14, color = "white"),
    
    # Titres des facettes
    strip.text = element_text(face = "bold", size = 19, color = "white"),
    
    # Fond du graphique et grilles
    panel.grid.major = element_line(color = "#444444"),  # Grilles principales
    panel.background = element_rect(fill = "#2C2C2C"),  # Fond des panneaux (facettes)
    plot.background = element_rect(fill = "#2C2C2C"),  # Fond global
    panel.grid.minor = element_blank(),  # Retirer les petites grilles
    
    # Marges extérieures du graphique
    plot.margin = margin(10, 10, 10, 10)
  )

```

## **Principales observations :**

1.  **Tendance Générale au Réchauffement :**\
    Toutes les régions montrent une **augmentation des températures moyennes** sur la période étudiée. Les pentes positives confirment une tendance linéaire ascendante.

2.  **Régions avec les Pentes les Plus Élevées :**

    -   La région **Auvergne-Rhône-Alpes** présente la **pente la plus forte** avec **0.089 °C/an**, indiquant un réchauffement plus marqué.
    -   Les régions comme **Bourgogne-Franche-Comté** et **Provence-Alpes-Côte d'Azur** affichent également des pentes élevées (**0.084 °C/an**).

3.  **Régions Plus Stables :**\
    Certaines régions comme **Bretagne** et **Normandie** montrent des pentes plus **modérées** (environ **0.057-0.064 °C/an**), ce qui peut indiquer une évolution moins rapide des températures moyennes.

4.  **Variabilité Spatiale :**\
    Les disparités entre les pentes régionales témoignent de l’**influence des caractéristiques géographiques et climatiques locales**, comme la proximité de l’océan ou l’altitude.

------------------------------------------------------------------------

### *Interprétation Géographique Approfondie :*

Les différences observées dans les pentes régionales peuvent s’expliquer par divers facteurs géographiques et climatiques. Par exemple, la **proximité de l’océan** tend à modérer les écarts de température, contribuant à des tendances plus stables dans des régions telles que la Bretagne ou la Normandie.

L’**altitude** joue également un rôle clé : dans les régions montagneuses (comme l’Auvergne-Rhône-Alpes), l’air plus froid en altitude limite l’élévation des températures, mais n’empêche pas une tendance au réchauffement, parfois même plus marquée que dans les zones de plaine.

Enfin, la **latitude** influe sur la durée et l’intensité de l’ensoleillement, pouvant également façonner la réponse régionale au réchauffement climatique. Ces facteurs combinés dessinent un tableau complexe, où l’évolution des températures dépend non seulement des tendances globales, mais aussi des spécificités locales.

------------------------------------------------------------------------

## **Détails Techniques :**

1.  **Extraction des Températures Régionales :**
    -   Les données proviennent des rasters de températures moyennes traités pour la France.

    -   Les valeurs annuelles moyennes ont été **extraites** pour chaque région à l’aide de la fonction `terra::extract`.
2.  **Agrégation Temporelle et Géographique :**
    -   Les températures ont été moyennées pour chaque année et chaque région.

    -   Une classification géographique a été ajoutée pour regrouper les régions par localisation (Nord, Sud-Est, etc.).
3.  **Analyse des Tendances Linéaires :**
    -   Une **régression linéaire** a été appliquée à chaque région pour calculer la pente (`Slope`) représentant l’**augmentation annuelle moyenne** des températures en °C/an.

    -   Les pentes calculées ont été **fusionnées** avec les données principales pour affichage.
4.  **Visualisation avec ggplot2 :**
    -   **Facettage** par région et localisation géographique pour une comparaison claire.
    -   **Points :** Données annuelles représentées en orange.
    -   **Ligne Cyan :** Régression linéaire pour chaque région.
    -   **Annotations :** Valeurs des pentes affichées en haut de chaque facette pour interpréter directement les tendances.

------------------------------------------------------------------------
